unit ProvaDelphiApp.Contador;

interface

uses
  ProvaDelphiApp.Interfaces,
  System.Threading,
  System.Generics.Collections,
  Vcl.ComCtrls;

type
  TContador = class(TInterfacedObject, iContador)
  private
    Tasks : array of ITask;
    FFilaContador : TList<iParametrosContador>;
  public
    constructor Create;
    destructor Destroy; override;
    class function New : iContador;
    function AddContador : iParametrosContador;
    function ExecuteAll : iContador;
  end;

implementation

uses
  Winapi.Windows, System.Classes, System.SysUtils,
  ProvaDelphiApp.ParametrosContador, ProvaDelphiApp.ExecuteContador;

{ TExecutaContador }

function TContador.AddContador: iParametrosContador;
var
  Contador : iParametrosContador;
begin
  Contador := TParametrosContador.New(Self);
  FFilaContador.Add(Contador);
  Result := Contador;
end;

constructor TContador.Create;
begin
  FFilaContador := TList<iParametrosContador>.Create;
end;

destructor TContador.Destroy;
begin
  FreeAndNil(FFilaContador);
  inherited;
end;

function TContador.ExecuteAll: iContador;
var
  I : integer;
begin
  SetLength(Tasks, FFilaContador.Count);

  for I := 0 to Pred(FFilaContador.Count) do
    TExecuteContador
      .New
        .SetProgressBar(FFilaContador[I].GetProgressBar)
        .SetTask(Tasks[I])
        .SetInterval(FFilaContador[I].GetIntervalo)
        .SetLoops(100)
        .Execute

end;

class function TContador.New: iContador;
begin
  Result := Self.Create;
end;


end.
