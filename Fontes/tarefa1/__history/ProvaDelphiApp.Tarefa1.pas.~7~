unit ProvaDelphiApp.Tarefa1;

interface

uses
  ProvaDelphiApp.Tarefa1.Interfaces, System.Classes, uspQuery;

type
  TGeraSQL = class(TInterfacedObject, iGeraSQL)
  private
    spQuery : TspQuery;
  public
    constructor Create;
    destructor Destroy; override;
    class function New : iGeraSQL;
    function AddColuna(AValue : string) : iGeraSQL; overload;
    function AddColuna(var AValue : TStrings) : iGeraSQL; overload;
    function AddTabela(AValue : string) : iGeraSQL; overload;
    function AddTabela(var AValue : TStrings) : iGeraSQL; overload;
    function AddCondicao(AValue : string) : iGeraSQL; overload;
    function AddCondicao(var AValue : TStrings) : iGeraSQL; overload;
    function ClearColunas : iGeraSQL;
    function ClearTabelas : iGeraSQL;
    function ClearCondicoes : iGeraSQL;
    function GetSQL : string;
  end;

implementation

uses
  System.SysUtils;

{ TGeraSQL }

function TGeraSQL.AddColuna(AValue: string): iGeraSQL;
begin
  Result := Self;
  spQuery.spColunas.Add(AValue);
end;

function TGeraSQL.AddColuna(var AValue: TStrings): iGeraSQL;
var
  I: Integer;
begin
  Result := Self;
  for I := 0 to Pred(AValue.Count) do
    AddColuna(AValue[I]);
end;

function TGeraSQL.AddCondicao(var AValue: TStrings): iGeraSQL;
var
  I: Integer;
begin
  Result := Self;
  for I := 0 to Pred(AValue.Count) do
    AddCondicao(AValue[I]);
end;

function TGeraSQL.AddCondicao(AValue: string): iGeraSQL;
begin
  Result := Self;
  spQuery.spCondicoes.Add(AValue);
end;

function TGeraSQL.AddTabela(var AValue: TStrings): iGeraSQL;
var
  I: Integer;
begin
  Result := Self;
  for I := 0 to Pred(AValue.Count) do
    AddTabela(AValue[I]);
end;

function TGeraSQL.AddTabela(AValue: string): iGeraSQL;
begin
  Result := Self;
  spQuery.spTabelas.Add(AValue);
end;

function TGeraSQL.ClearColunas: iGeraSQL;
begin
  Result := Self;
  spQuery.spColunas.Clear;
end;

function TGeraSQL.ClearCondicoes: iGeraSQL;
begin
  Result := Self;
  spQuery.spCondicoes.Clear;
end;

function TGeraSQL.ClearTabelas: iGeraSQL;
begin
  Result := Self;
  spQuery.spTabelas.Clear;
end;

constructor TGeraSQL.Create;
begin
  spQuery := TspQuery.Create(nil);
end;

destructor TGeraSQL.Destroy;
begin
  FreeAndNil(spQuery);
  inherited;
end;

function TGeraSQL.GetSQL: string;
begin
  spQuery.GeraSQL;
  Result := spQuery.SQL.Text;
end;

class function TGeraSQL.New: iGeraSQL;
begin
  Result := Self.Create;
end;

end.
